group router;


serviceClassName(service) ::=<<
RoutesForSvc<service.svcId>
>>

methodConsts(endpoint, i) ::=<<
private static final int _METHOD_<endpoint.originalMethodName> = <i>;

>>

methodCall(endpoint) ::=<<
case _METHOD_<endpoint.originalMethodName>:
    return _<endpoint.originalMethodName>(tpReq);
>>

methodWrapper(endpoint, service) ::=<<
private String _<endpoint.originalMethodName>(TurnpikeRequest tpReq){
    if(!tpReq.validNumberOfParams())
        throw new RuntimeException("Incorrect Number of params received");

    <service.svcFqcn> service = new <service.svcFqcn>();
    <endpoint.params:{param | <extractPathParam(param, i0)>};separator="\n">


    Object ret = service.<endpoint.originalMethodName>(<endpoint.params:{param | _p_<i0>};separator=",">);
    return toJson(ret);
}
>>

extractPathParam(param, index)::=<<
<if(param.primitive)><param.type> _p_<index> = (<param.type>)tpReq.getParam(<index>);
<elseif(param.headers)>Map\< String, Object> _p_<index> = tpReq.getHeaders();
<else><param.type> _p_<index> = tpReq.getParam("<param.name>", <param.type>.class);
<endif>

>>

addAction(endpoint) ::=<<
//adding route for a method with <endpoint.params> param(s)
Action _action_<endpoint.originalMethodName> = action("<endpoint.methodPath>","<endpoint.httpMethod.val>", _METHOD_<endpoint.originalMethodName>)
<endpoint.pathParams:addParam()>;
addRoute(_action_<endpoint.originalMethodName>);

>>
addParam(param)::=<<
.add(new ActionParam("<param.name>",<param.displayType;format="upper">))
>>


addEndpointImports(endpoint)::=<<
<endpoint.bodyParams:addParamImports()>
>>

addParamImports(param)::=<<
<param.imports:{im | import <im>;};separator="\n">
>>


routeClass(service) ::=<<
package io.str8.gen;

import <service.svcFqcn>;
<service.endpoints:addEndpointImports();separator="\n">


import io.str8.turnpike.routing.*;
import io.str8.turnpike.utils.*;


import static io.str8.turnpike.routing.ActionParam.PARAM_TYPE.*;


//DO NOT EDIT: Generated by Turnpike for <service.svcName>
public class <serviceClassName(service)> extends Route {

    <service.endpoints:{endpoint | <methodConsts(endpoint,i)>}>


    //All this will be executed during server startup
    public <serviceClassName(service)>(){
        <service.endpoints:addAction(); separator="\n">
    }

    public void register(){
        RouteRegister.instance.addRoute("<service.path>", <service.svcFqcn>.class, this);
    }

    private Action action(String uri, String method, int id){
        Action a = Action.create(uri, method);
        a.id = id;
        return a;
    }
    //--- Till Here ---




    //All this gets called for a given request
    //protected String call(Action action, String[] params, String json) {
    protected String call(TurnpikeRequest tpReq) {
        <service.svcFqcn> service = new <service.svcFqcn>();
        switch (tpReq.actionId){
            <service.endpoints:methodCall();separator="\n">
        }

        return null;
    }

    <service.endpoints:methodWrapper(service);separator="\n">

    //--- Till Here ---


}



>>